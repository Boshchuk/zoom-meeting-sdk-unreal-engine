// Copyright : All rights reserved by Zoom Video Communications 2022-

#pragma once

#include "AnswerItem.h"
#include "SDKUtils.h"
#include "UserManager.h"

#include "meeting_service_components/meeting_chat_interface.h"
#include "zoom_sdk_def.h"

// clang-format off
#include "ZoomMeetingSDKBPDefine.generated.h"
// clang-format on

// Redefining ENUM to be UE compatible.
UENUM(BlueprintType)
enum class BO_STOP_COUNTDOWN : uint8 {
  BO_STOP_NOT_COUNTDOWN UMETA(DisplayName = "No Countdown"),
  BO_STOP_COUNTDOWN_SECONDS_10 UMETA(DisplayName = "Countdown 10 seconds"),
  BO_STOP_COUNTDOWN_SECONDS_15 UMETA(DisplayName = "Countdown 15 seconds"),
  BO_STOP_COUNTDOWN_SECONDS_30 UMETA(DisplayName = "Countdown 30 seconds"),
  BO_STOP_COUNTDOWN_SECONDS_60 UMETA(DisplayName = "Countdown 60 seconds"),
  BO_STOP_COUNTDOWN_SECONDS_120 UMETA(DisplayName = "Countdown 120 seconds"),
};

UENUM(BlueprintType)
enum class CHAT_MESSAGE_TYPE : uint8 {
  SDKChatMessageType_To_None UMETA(DisplayName = "To None"),
  SDKChatMessageType_To_All UMETA(DisplayName = "To All"),
  SDKChatMessageType_To_All_Panelist UMETA(DisplayName = "To All Panelist"),
  SDKChatMessageType_To_Individual_Panelist UMETA(
      DisplayName = "To All Individual Panelist"),
  SDKChatMessageType_To_Individual UMETA(DisplayName = "To Individual"),
  SDKChatMessageType_To_WaitingRoomUsers UMETA(DisplayName =
                                                   "To Waiting Room Users"),
};

// Enum to define the raw video datas resolution.
// Mimics enum ZoomSDKResolution in rawdata\rawdata_renderer_interface.h
UENUM(BlueprintType)
enum class RAW_DATA_RESOLUTION : uint8 {
  ZoomSDKResolution_90P UMETA(DisplayName = "90P"),
  ZoomSDKResolution_180P UMETA(DisplayName = "180P"),
  ZoomSDKResolution_360P UMETA(DisplayName = "360P"),
  ZoomSDKResolution_720P UMETA(DisplayName = "720P"),
  ZoomSDKResolution_1080P UMETA(DisplayName = "1080P"),
};

// Enum to define the emoji reaction type.
// Mimics enum SDKEmojiReactionType in
// meeting_service_components\meeting_emoji_reaction_interface.h
UENUM(BlueprintType)
enum class SDK_EMOJI_REACTION_TYPE : uint8 {
  SDKEmojiReactionType_None UMETA(DisplayName = "None"),
  SDKEmojiReactionType_Clap UMETA(DisplayName = "Clap"),
  SDKEmojiReactionType_Thumbsup UMETA(DisplayName = "Thumbsup"),
  SDKEmojiReactionType_Heart UMETA(DisplayName = "Heart"),
  SDKEmojiReactionType_Joy UMETA(DisplayName = "Joy"),
  SDKEmojiReactionType_Openmouth UMETA(DisplayName = "Openmouth"),
  SDKEmojiReactionType_Tada UMETA(DisplayName = "Tada"),
};

// Enum to define the emoji reaction type.
// Mimics enum SDKEmojiFeedbackType in
// meeting_service_components\meeting_emoji_reaction_interface.h
UENUM(BlueprintType)
enum class SDK_EMOJI_FEEDBACK_TYPE : uint8 {
  SDKEmojiFeedbackType_None UMETA(DisplayName = "None"),
  SDKEmojiFeedbackType_Yes UMETA(DisplayName = "Yes"),
  SDKEmojiFeedbackType_No UMETA(DisplayName = "No"),
  SDKEmojiFeedbackType_SpeedUp UMETA(DisplayName = "SpeedUp"),
  SDKEmojiFeedbackType_SlowDown UMETA(DisplayName = "SlowDown"),
  SDKEmojiFeedbackType_Away UMETA(DisplayName = "Away"),
};

// Redefining ENUM ZoomSDKRawDataType to be UE compatible.
UENUM(BlueprintType)
enum class ZOOM_SDK_RAW_DATA_TYPE : uint8 {
  ZoomSDKRawDataType_Video UMETA(DisplayName = "Video"),
  ZoomSDKRawDataType_Share UMETA(DisplayName = "Share"),
};

// Enum to define the sharing status.
// Mimics enum SharingStatus in
// meeting_service_components\meeting_sharing_interface.h
UENUM(BlueprintType)
enum class SHARING_STATUS : uint8 {
  Sharing_Self_Send_Begin UMETA(DisplayName = "Begin"),
  Sharing_Self_Send_End UMETA(DisplayName = "End"),
  Sharing_Self_Send_Pure_Audio_Begin UMETA(DisplayName = "Self Send Pure Audio Begin"),
  Sharing_Self_Send_Pure_Audio_End UMETA(DisplayName = "Self Send Pure Audio End"),
  Sharing_Other_Share_Begin UMETA(DisplayName = "Other Share Begin"),
  Sharing_Other_Share_End UMETA(DisplayName = "Other Share End"),
  Sharing_Other_Share_Pure_Audio_Begin UMETA(DisplayName = "Other Share Pure Audio Begin"),
  Sharing_Other_Share_Pure_Audio_End UMETA(DisplayName = "Other Share Pure Audio End"),
  Sharing_View_Other_Sharing UMETA(DisplayName = "View Other Sharing"),
  Sharing_Pause UMETA(DisplayName = "Pause"),
  Sharing_Resume UMETA(DisplayName = "Resume"),
};

// Blueprint struct to store the Auth Pair generated by PKCE.
USTRUCT(BlueprintType)
struct FUEAuth_Pair {
  GENERATED_USTRUCT_BODY()
public:
  UPROPERTY(BlueprintReadOnly)
  FString auth_url;

  UPROPERTY(BlueprintReadOnly)
  FString verifier;

  FUEAuth_Pair(FString p_auth_url, FString p_verifier) {
    auth_url = p_auth_url;
    verifier = p_verifier;
  }

  FUEAuth_Pair() {
    auth_url = "Invalid";
    verifier = "Invalid";
  }
};

// Blueprint struct which contains IAnswerItem info for a given answer id.
USTRUCT(BlueprintType)
struct FUEAnswerItem {
  GENERATED_USTRUCT_BODY()
public:
  UPROPERTY(BlueprintReadOnly)
  FString answer_id;

  UPROPERTY(BlueprintReadOnly)
  int64 timestamp;

  UPROPERTY(BlueprintReadOnly)
  FString text;

  UPROPERTY(BlueprintReadOnly)
  FString sender_name;

  UPROPERTY(BlueprintReadOnly)
  FString question_id;

  UPROPERTY(BlueprintReadOnly)
  bool is_private;

  UPROPERTY(BlueprintReadOnly)
  bool is_live_answer;

  UPROPERTY(BlueprintReadOnly)
  bool is_sender_myself;

  FUEAnswerItem(ZOOM_SDK_NAMESPACE::IAnswerItem *answer_item) {
    answer_id = answer_item->GetAnswerID();
    timestamp = answer_item->GetTimeStamp();
    text = answer_item->GetText();
    sender_name = answer_item->GetSenderName();
    question_id = answer_item->GetQuestionID();
    is_private = answer_item->IsPrivate();
    is_live_answer = answer_item->IsLiveAnswer();
    is_sender_myself = answer_item->IsSenderMyself();
  }

  FUEAnswerItem() {
    answer_id = "";
    timestamp = 0;
    text = "";
    sender_name = "";
    question_id = "";
    is_private = false;
    is_live_answer = false;
    is_sender_myself = false;
  }
};

// Blueprint struct which contains IQAItemInfo info for a given question id.
USTRUCT(BlueprintType)
struct FUEQAItemInfo {
  GENERATED_USTRUCT_BODY()

private:
  
  TArray<FUEAnswerItem> ConvertToUEStruct(ZOOMSDK::IList<ZOOM_SDK_NAMESPACE::IAnswerItem *> *temp) {
    TArray<FUEAnswerItem> ue_answer_item_list;
    for (int i = 0; i < temp->GetCount(); i++) {
      ue_answer_item_list.Add(FUEAnswerItem(temp->GetItem(i)));
    }
    return ue_answer_item_list;
  }

public:
  UPROPERTY(BlueprintReadOnly)
  FString question_id;

  UPROPERTY(BlueprintReadOnly)
  int64 timestamp;

  UPROPERTY(BlueprintReadOnly)
  int64 upvote_num;

  UPROPERTY(BlueprintReadOnly)
  FString text;

  UPROPERTY(BlueprintReadOnly)
  FString sender_name;

  UPROPERTY(BlueprintReadOnly)
  bool is_anonymous;

  UPROPERTY(BlueprintReadOnly)
  bool is_marked_as_answer;

  UPROPERTY(BlueprintReadOnly)
  bool is_marked_as_dismissed;

  UPROPERTY(BlueprintReadOnly)
  bool is_sender_myself;

  UPROPERTY(BlueprintReadOnly)
  bool is_myself_upvoted;

  UPROPERTY(BlueprintReadOnly)
  bool has_live_answers;

  UPROPERTY(BlueprintReadOnly)
  bool has_text_answers;

  UPROPERTY(BlueprintReadOnly)
  bool am_i_live_answering;

  UPROPERTY(BlueprintReadOnly)
  FString get_live_answer_name;

  UPROPERTY(BlueprintReadOnly)
  bool is_live_answering;

  UPROPERTY(BlueprintReadOnly)
  TArray<FUEAnswerItem> get_answer_list;

  FUEQAItemInfo(ZOOM_SDK_NAMESPACE::IQAItemInfo *qa_item_info) {
    question_id = qa_item_info->GetQuestionID();
    timestamp = qa_item_info->GetTimeStamp();
    upvote_num = qa_item_info->GetUpvoteNum();
    text = qa_item_info->GetText();
    sender_name = qa_item_info->GetSenderName();
    is_anonymous = qa_item_info->IsAnonymous();
    is_sender_myself = qa_item_info->IsSenderMyself();
    is_marked_as_answer = qa_item_info->IsMarkedAsAnswered();
    is_marked_as_dismissed = qa_item_info->IsMarkedAsDismissed();
    has_live_answers = qa_item_info->HasLiveAnswers();
    has_text_answers = qa_item_info->HasTextAnswers();
    am_i_live_answering = qa_item_info->AmILiveAnswering();
    get_live_answer_name = qa_item_info->GetLiveAnswerName();
    is_live_answering = qa_item_info->IsLiveAnswering();
    get_answer_list = ConvertToUEStruct(qa_item_info->GetAnswerList());
  }

  FUEQAItemInfo() {
    question_id = "";
    timestamp = 0;
    upvote_num = 0;
    text = "";
    sender_name = "";
    is_anonymous = false;
    is_sender_myself = false;
    is_marked_as_answer = false;
    is_marked_as_dismissed = false;
    has_live_answers = false;
    has_text_answers = false;
    am_i_live_answering = false;
    get_live_answer_name = "";
    is_live_answering = false;
  }
};

// Redefining Struct to be UE compatible.
// # MeetingParameter
USTRUCT(BlueprintType)
struct FUEMeetingParameter {
  GENERATED_USTRUCT_BODY()
public:
  UPROPERTY(BlueprintReadOnly)
  FString meeting_type;

  UPROPERTY(BlueprintReadOnly)
  bool is_view_only;

  UPROPERTY(BlueprintReadOnly)
  bool is_auto_recording_local;

  UPROPERTY(BlueprintReadOnly)
  bool is_auto_recording_cloud;

  UPROPERTY(BlueprintReadOnly)
  int meeting_number;

  UPROPERTY(BlueprintReadOnly)
  FString meeting_topic;

  UPROPERTY(BlueprintReadOnly)
  FString meeting_host;

  FUEMeetingParameter() {
    meeting_type = ZOOM_UE_NAMESPACE::MeetingTypeToString(
        ZOOM_SDK_NAMESPACE::MEETING_TYPE_NONE);
    is_view_only = true;
    is_auto_recording_local = false;
    is_auto_recording_cloud = false;
    meeting_number = 0;
  }

  FUEMeetingParameter(
      const ZOOM_SDK_NAMESPACE::MeetingParameter *meeting_param) {
    meeting_type =
        ZOOM_UE_NAMESPACE::MeetingTypeToString(meeting_param->meeting_type);
    is_view_only = meeting_param->is_view_only;
    is_auto_recording_local = meeting_param->is_auto_recording_local;
    is_auto_recording_cloud = meeting_param->is_auto_recording_cloud;
    meeting_number = meeting_param->meeting_number;
    meeting_topic = meeting_param->meeting_topic;
    meeting_host = meeting_param->meeting_host;
  }
};

// # ChatStatus
USTRUCT(BlueprintType)
struct FUEChatStatus {
  GENERATED_USTRUCT_BODY()
public:
  UPROPERTY(BlueprintReadOnly)
  bool is_valid_status;
  UPROPERTY(BlueprintReadOnly)
  bool is_chat_off;
  UPROPERTY(BlueprintReadOnly)
  bool is_webinar_attendee;
  UPROPERTY(BlueprintReadOnly)
  bool is_webinar_meeting;

  FUEChatStatus() {
    is_valid_status = false;
    is_chat_off = false;
    is_webinar_attendee = false;
    is_webinar_meeting = false;
  }

  FUEChatStatus(const ZOOM_SDK_NAMESPACE::ChatStatus *chat_status) {
    is_valid_status = true;
    is_chat_off = chat_status->is_chat_off;
    is_webinar_attendee = chat_status->is_webinar_attendee;
    is_webinar_meeting = chat_status->is_webinar_meeting;
  }
};

// # UserInfo
USTRUCT(BlueprintType)
struct FUEUserInfo {
  GENERATED_USTRUCT_BODY()
public:
  UPROPERTY(BlueprintReadOnly)
  int64 user_id;

  UPROPERTY(BlueprintReadOnly)
  FString user_name;

  UPROPERTY(BlueprintReadOnly)
  FString user_role;

  UPROPERTY(BlueprintReadOnly)
  bool is_host;

  UPROPERTY(BlueprintReadOnly)
  bool is_in_waiting_room;

  UPROPERTY(BlueprintReadOnly)
  bool is_talking;

  UPROPERTY(BlueprintReadOnly)
  bool is_video_on;

  UPROPERTY(BlueprintReadOnly)
  bool is_raise_hand;

  UPROPERTY(BlueprintReadOnly)
  int audio_level;

  UPROPERTY(BlueprintReadOnly)
  bool is_myself;

  FUEUserInfo() {
    user_id = 0;
    user_name = "Invalid";
    user_role = "Unknown";
    is_host = false;
    is_in_waiting_room = false;
    is_talking = false;
    is_video_on = false;
    is_raise_hand = false;
    audio_level = 0;
    is_myself = false;
  }

  FUEUserInfo(ZOOM_UE_NAMESPACE::UserInfo &user_info) {
    user_id = user_info.GetUserID();
    user_name = user_info.GetUserName();
    user_role = user_info.GetUserRoleAsString();
    is_host = user_info.IsHost();
    is_in_waiting_room = user_info.IsInWaitingRoom();
    is_talking = user_info.IsTalking();
    is_video_on = user_info.IsVideoOn();
    is_raise_hand = user_info.IsRaiseHand();
    audio_level = user_info.GetAudioVoiceLevel();
    is_myself = user_info.IsMySelf();
  }
};

// # IChatMsgInfo
USTRUCT(BlueprintType)
struct FUEChatMsgInfo {
  GENERATED_USTRUCT_BODY()
public:
  UPROPERTY(BlueprintReadOnly)
  FString message_id;

  UPROPERTY(BlueprintReadOnly)
  int64 sender_user_id;

  UPROPERTY(BlueprintReadOnly)
  FString sender_display_name;

  UPROPERTY(BlueprintReadOnly)
  int64 receiver_user_id;

  UPROPERTY(BlueprintReadOnly)
  FString receiver_display_name;

  UPROPERTY(BlueprintReadOnly)
  FString content;

  UPROPERTY(BlueprintReadOnly)
  int64 timestamp;

  UPROPERTY(BlueprintReadOnly)
  bool is_chat_to_all;

  UPROPERTY(BlueprintReadOnly)
  bool is_chat_to_panelist;

  UPROPERTY(BlueprintReadOnly)
  bool is_chat_to_waitingroom;

  UPROPERTY(BlueprintReadOnly)
  FString chat_msg_type;

  FUEChatMsgInfo() {
    sender_user_id = 0;
    receiver_user_id = 0;
    timestamp = 0;
    is_chat_to_all = false;
    is_chat_to_panelist = false;
    is_chat_to_waitingroom = false;
    chat_msg_type = ZOOM_UE_NAMESPACE::SDKChatMessageTypeToString(
        ZOOM_SDK_NAMESPACE::SDKChatMessageType::SDKChatMessageType_To_None);
  }

  FUEChatMsgInfo(ZOOM_SDK_NAMESPACE::IChatMsgInfo *chatMsg) {
    message_id = chatMsg->GetMessageID();
    sender_user_id = chatMsg->GetSenderUserId();
    sender_display_name = chatMsg->GetSenderDisplayName();
    receiver_user_id = chatMsg->GetReceiverUserId();
    receiver_display_name = chatMsg->GetReceiverDisplayName();
    content = chatMsg->GetContent();
    timestamp = chatMsg->GetTimeStamp();
    is_chat_to_all = chatMsg->IsChatToAll();
    is_chat_to_panelist = chatMsg->IsChatToAllPanelist();
    is_chat_to_waitingroom = chatMsg->IsChatToWaitingroom();
    chat_msg_type = ZOOM_UE_NAMESPACE::SDKChatMessageTypeToString(
        chatMsg->GetChatMessageType());
  }
};